{"version":3,"sources":["containers/App/useBoard.ts","constants/index.ts","containers/App/messages.ts","containers/App/App.tsx","i18n/I18nProvider.tsx","reportWebVitals.ts","index.tsx"],"names":["useBoard","useState","endGame","setEndGame","board","setBoard","minesCount","setMinesCount","mines","arr","c","x","Math","floor","random","y","some","p","push","length","setMines","createBoard","row","tile","key","status","mine","content","flat","setStatusHandler","value","i","findIndex","t","boardState","newState","map","o","idx","stateBoard","markedMines","filter","setMinesLeft","useEffect","handleLeftClick","hasMinesTiles","tiles","xOffset","yOffset","find","nearTiles","forEach","setContentHandler","toString","handleRightClick","e","preventDefault","defineMessages","title","id","defaultMessage","minesLeft","lose","win","tryAgain","App","intl","useIntl","className","formatMessage","messages","type","onClick","style","role","onContextMenu","I18nProvider","children","useMemo","ruMessages","locale","memo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4kBA2MeA,EA7LE,WAAmB,IAAD,EACHC,oBAAqB,GADlB,mBAC1BC,EAD0B,KACjBC,EADiB,OAEPF,mBAAiB,IAFV,mBAE1BG,EAF0B,KAEnBC,EAFmB,OAGGJ,mBChBP,IDaI,mBAG1BK,EAH0B,KAGdC,EAHc,KAsB3BC,EAjBW,WAGf,IAFA,IAAMC,EAAM,GADS,aAInB,IAAMC,EAAI,CACRC,EAAGC,KAAKC,MCxBU,GDwBJD,KAAKE,UACnBC,EAAGH,KAAKC,MCzBU,GDyBJD,KAAKE,WAGhBL,EAAIO,MAAK,SAACC,GAAD,OAAOA,EAAEN,IAAMD,EAAEC,GAAKM,EAAEF,IAAML,EAAEK,MAC5CN,EAAIS,KAAKR,IAPND,EAAIU,OCrBgB,IDqBW,IAWtC,OAAOV,EAGKW,GAERC,EAAc,WAGlB,IAFA,IAAMZ,EAAM,GADY,WAGfE,GAGP,IAFA,IAAMW,EAAM,GAJU,WAMbP,GACP,IAAMQ,EAAO,CACXZ,IACAI,IACAS,IAAI,GAAD,OAAKb,GAAL,OAASI,GACZU,OAAQ,SACRC,KAAMlB,EAAMQ,MAAK,SAACC,GAAD,OAAOA,EAAEN,IAAMA,GAAKM,EAAEF,IAAMA,KAC7CY,QAAS,IAGXL,EAAIJ,KAAKK,IAVFR,EAAI,EAAGA,EC5CI,GD4CYA,GAAK,EAAI,EAAhCA,GAaTN,EAAIS,KAAKI,IAhBFX,EAAI,EAAGA,ECzCM,GDyCUA,GAAK,EAAI,EAAhCA,GAmBTN,EAASI,EAAImB,QACbzB,GAAW,IAaP0B,EAAmB,SAACN,EAAYO,GACpC,IAAMC,EAAI3B,EAAM4B,WAAU,SAACC,GAAD,OAAOA,EAAET,MAAQD,EAAKC,OAEhDnB,GAAS,SAAC6B,GACR,IAAMC,EAAWD,EAAWE,KAC1B,SAACC,EAAGC,GACF,OAAIA,IAAQP,EACH,2BACFM,GADL,IAEEZ,OAAQK,IAILO,KAUX,OAjCiB,SAACE,GACpB,IAAMC,EAAcD,EAAWE,QAAO,kBAA2B,WAA3B,EAAGhB,UACtCN,OAEHZ,ECnE2B,GDmEKiC,GAuB9BE,CAAaP,GAESA,EArBXM,QAAO,SAACR,GAAD,MAAoB,WAAbA,EAAER,UAAqBN,QAsB9ChB,EAAW,OAGNgC,MAgGX,OAJAQ,qBAAU,WACRtB,MACC,IAEI,CACLjB,QACAiB,cACAnB,UACA0C,gBA3DsB,SAACrB,GACvB,IACMsB,EApBU,SAAC,GAGjB,IAH0C,IAAvBlC,EAAsB,EAAtBA,EAAGI,EAAmB,EAAnBA,EAAGS,EAAgB,EAAhBA,IACnBsB,EAAQ,GAD2B,WAGhCC,GACP,IAJuC,eAI9BC,GACP,IAAMzB,EAAOnB,EAAM6C,MACjB,SAAChB,GAAD,OAAOA,EAAEtB,IAAMA,EAAIoC,GAAWd,EAAElB,IAAMA,EAAIiC,KAGxCzB,GACFuB,EAAM5B,KAAKK,IANNyB,GAAW,EAAGA,GAAW,EAAGA,GAAW,EAAI,EAA3CA,IADFD,GAAW,EAAGA,GAAW,EAAGA,GAAW,EAAI,EAA3CA,GAYT,OAAOD,EAAML,QAAO,SAACR,GAAD,OAAOA,EAAET,MAAQA,KAIf0B,CAAU3B,GACIkB,QAAO,SAACR,GAAD,OAAOA,EAAEP,QAEpD,IAAIxB,GAIgB,WAAhBqB,EAAKE,OAAT,CAIA,GAAIF,EAAKG,KASP,OAPAtB,EAAM+C,SAAQ,SAAClB,GACTA,EAAEP,MACJG,EAAiBI,EAAG,gBAGxB9B,GAAW,GAKb0B,EAAiBN,EAAM,UAEM,IAAzBsB,EAAc1B,QA/DM,SAACI,EAAYO,GACrC,IAAMC,EAAI3B,EAAM4B,WAAU,SAACC,GAAD,OAAOA,EAAET,MAAQD,EAAKC,OAEhDnB,GAAS,SAAC6B,GAAD,OACPA,EAAWE,KACT,SAACC,EAAGC,GACF,OAAIA,IAAQP,EACH,2BACFM,GADL,IAEEV,QAASG,IAINO,QAqDXe,CAAkB7B,EAAMsB,EAAc1B,OAAOkC,cA+B/CC,iBA3BuB,SAACC,EAA+BhC,GACvDgC,EAAEC,iBAEEtD,GAIgB,WAAhBqB,EAAKE,QAAuC,WAAhBF,EAAKE,SAIjB,WAAhBF,EAAKE,OACPI,EAAiBN,EAAM,UAEvBM,EAAiBN,EAAM,YAczBjB,e,QErMWmD,cAAe,CAC5BC,MAAO,CACLC,GAAI,YACJC,eAAgB,eAElBC,UAAW,CACTF,GAAI,gBACJC,eAAgB,cAElBE,KAAM,CACJH,GAAI,WACJC,eAAgB,YAElBG,IAAK,CACHJ,GAAI,UACJC,eAAgB,WAElBI,SAAU,CACRL,GAAI,eACJC,eAAgB,e,eCyCLK,EApDO,WACpB,IAAMC,EAAOC,cADa,EAStBnE,IANFI,EAHwB,EAGxBA,MACAiB,EAJwB,EAIxBA,YACAnB,EALwB,EAKxBA,QACA0C,EANwB,EAMxBA,gBACAU,EAPwB,EAOxBA,iBACAhD,EARwB,EAQxBA,WAGF,OACE,sBAAK8D,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,SAAuBF,EAAKG,cAAcC,EAASZ,SACnD,qBAAKU,UAAU,SAAf,SACIlE,EAKA,+BACe,QAAZA,EACGgE,EAAKG,cAAcC,EAASP,KAC5BG,EAAKG,cAAcC,EAASR,QAPlC,iCACGI,EAAKG,cAAcC,EAAST,WAD/B,KAC6CvD,OAUjD,8BACE,wBAAQiE,KAAK,SAASC,QAASnD,EAA/B,SACG6C,EAAKG,cAAcC,EAASN,cAGjC,qBACEI,UAAU,QACVK,MAAO,CAAE,SF5CS,IE0CpB,SAIGrE,EAAMgC,KAAI,SAACb,GAAD,OACT,qBAEEmD,KAAK,eACLN,UAAW7C,EAAKE,OAChB+C,QAAS,kBAAM5B,EAAgBrB,IAC/BoD,cAAe,SAACpB,GAAD,OAAOD,EAAiBC,EAAGhC,IAL5C,SAOGA,EAAKI,SANDJ,EAAKC,c,gBCvChBoD,EAAe,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,SAChBP,EAAWQ,mBAAQ,kBAAMC,IAAY,IAE3C,OACE,cAAC,IAAD,CAAcC,OAAO,KAAKV,SAAUA,EAApC,SACGO,KAKQI,iBAAKL,GCLLM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.9f098b53.chunk.js","sourcesContent":["import { MouseEvent, useEffect, useState } from 'react';\nimport { BOARD_SIZE, NUMBER_OF_MINES } from '../../constants';\n\nimport { Coords, GameStatus, Status, Tile } from './types';\n\ntype ReturnType = {\n  board: Tile[];\n  createBoard: () => void;\n  endGame: GameStatus;\n  handleLeftClick: (tile: Tile) => void;\n  handleRightClick: (e: MouseEvent<HTMLDivElement>, tile: Tile) => void;\n  minesCount: number;\n};\n\nconst useBoard = (): ReturnType => {\n  const [endGame, setEndGame] = useState<GameStatus>(false);\n  const [board, setBoard] = useState<Tile[]>([]);\n  const [minesCount, setMinesCount] = useState(NUMBER_OF_MINES);\n\n  const setMines = () => {\n    const arr = [] as Coords[];\n\n    while (arr.length < NUMBER_OF_MINES) {\n      const c = {\n        x: Math.floor(Math.random() * BOARD_SIZE),\n        y: Math.floor(Math.random() * BOARD_SIZE),\n      } as Coords;\n\n      if (!arr.some((p) => p.x === c.x && p.y === c.y)) {\n        arr.push(c);\n      }\n    }\n\n    return arr;\n  };\n\n  const mines = setMines();\n\n  const createBoard = () => {\n    const arr = [];\n\n    for (let x = 0; x < BOARD_SIZE; x += 1) {\n      const row = [];\n\n      for (let y = 0; y < BOARD_SIZE; y += 1) {\n        const tile = {\n          x,\n          y,\n          key: `${x}${y}`,\n          status: 'hidden',\n          mine: mines.some((p) => p.x === x && p.y === y),\n          content: '',\n        } as Tile;\n\n        row.push(tile);\n      }\n\n      arr.push(row);\n    }\n\n    setBoard(arr.flat());\n    setEndGame(false);\n  };\n\n  const setMinesLeft = (stateBoard: Tile[]) => {\n    const markedMines = stateBoard.filter(({ status }) => status === 'marked')\n      .length;\n\n    setMinesCount(NUMBER_OF_MINES - markedMines);\n  };\n\n  const checkHiddenTiles = (stateBoard: Tile[]) =>\n    !!stateBoard.filter((t) => t.status === 'hidden').length;\n\n  const setStatusHandler = (tile: Tile, value: Status) => {\n    const i = board.findIndex((t) => t.key === tile.key);\n\n    setBoard((boardState): Tile[] => {\n      const newState = boardState.map(\n        (o, idx): Tile => {\n          if (idx === i) {\n            return {\n              ...o,\n              status: value,\n            };\n          }\n\n          return o;\n        },\n      );\n\n      setMinesLeft(newState);\n\n      if (!checkHiddenTiles(newState)) {\n        setEndGame('win');\n      }\n\n      return newState;\n    });\n  };\n\n  const setContentHandler = (tile: Tile, value: string) => {\n    const i = board.findIndex((t) => t.key === tile.key);\n\n    setBoard((boardState): Tile[] =>\n      boardState.map(\n        (o, idx): Tile => {\n          if (idx === i) {\n            return {\n              ...o,\n              content: value,\n            };\n          }\n\n          return o;\n        },\n      ),\n    );\n  };\n\n  const nearTiles = ({ x, y, key }: Tile) => {\n    const tiles = [];\n\n    for (let xOffset = -1; xOffset <= 1; xOffset += 1) {\n      for (let yOffset = -1; yOffset <= 1; yOffset += 1) {\n        const tile = board.find(\n          (t) => t.x === x + xOffset && t.y === y + yOffset,\n        );\n\n        if (tile) {\n          tiles.push(tile);\n        }\n      }\n    }\n\n    return tiles.filter((t) => t.key !== key);\n  };\n\n  const handleLeftClick = (tile: Tile) => {\n    const neighborTiles = nearTiles(tile);\n    const hasMinesTiles = neighborTiles.filter((t) => t.mine);\n\n    if (endGame) {\n      return;\n    }\n\n    if (tile.status !== 'hidden') {\n      return;\n    }\n\n    if (tile.mine) {\n      // setStatusHandler(tile, 'mine');\n      board.forEach((t) => {\n        if (t.mine) {\n          setStatusHandler(t, 'mine');\n        }\n      });\n      setEndGame(true);\n\n      return;\n    }\n\n    setStatusHandler(tile, 'number');\n\n    if (hasMinesTiles.length === 0) {\n      // neighborTiles.forEach((t) => handleLeftClick(t)); // ERROR HERE!!!\n    } else {\n      setContentHandler(tile, hasMinesTiles.length.toString());\n    }\n  };\n\n  const handleRightClick = (e: MouseEvent<HTMLDivElement>, tile: Tile) => {\n    e.preventDefault();\n\n    if (endGame) {\n      return;\n    }\n\n    if (tile.status !== 'hidden' && tile.status !== 'marked') {\n      return;\n    }\n\n    if (tile.status === 'marked') {\n      setStatusHandler(tile, 'hidden');\n    } else {\n      setStatusHandler(tile, 'marked');\n    }\n  };\n\n  useEffect(() => {\n    createBoard();\n  }, []);\n\n  return {\n    board,\n    createBoard,\n    endGame,\n    handleLeftClick,\n    handleRightClick,\n    minesCount,\n  };\n};\n\nexport default useBoard;\n","export const BOARD_SIZE = 10;\nexport const NUMBER_OF_MINES = 10;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  title: {\n    id: 'App.title',\n    defaultMessage: 'Minesweeper',\n  },\n  minesLeft: {\n    id: 'App.minesLeft',\n    defaultMessage: 'Mines left',\n  },\n  lose: {\n    id: 'App.lose',\n    defaultMessage: 'You lose',\n  },\n  win: {\n    id: 'App.win',\n    defaultMessage: 'You win',\n  },\n  tryAgain: {\n    id: 'App.tryAgain',\n    defaultMessage: 'Try again',\n  },\n});\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { BOARD_SIZE } from '../../constants';\n\nimport useBoard from './useBoard';\n\nimport messages from './messages';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  const intl = useIntl();\n  const {\n    board,\n    createBoard,\n    endGame,\n    handleLeftClick,\n    handleRightClick,\n    minesCount,\n  } = useBoard();\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"Title\">{intl.formatMessage(messages.title)}</h1>\n      <div className=\"Status\">\n        {!endGame ? (\n          <span>\n            {intl.formatMessage(messages.minesLeft)}: {minesCount}\n          </span>\n        ) : (\n          <span>\n            {endGame === 'win'\n              ? intl.formatMessage(messages.win)\n              : intl.formatMessage(messages.lose)}\n          </span>\n        )}\n      </div>\n      <div>\n        <button type=\"button\" onClick={createBoard}>\n          {intl.formatMessage(messages.tryAgain)}\n        </button>\n      </div>\n      <div\n        className=\"Board\"\n        style={{ '--size': BOARD_SIZE } as React.CSSProperties}\n      >\n        {board.map((tile) => (\n          <div\n            key={tile.key}\n            role=\"presentation\"\n            className={tile.status}\n            onClick={() => handleLeftClick(tile)}\n            onContextMenu={(e) => handleRightClick(e, tile)}\n          >\n            {tile.content}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React, { ReactElement, ReactNode, memo, useMemo } from 'react';\nimport { IntlProvider } from 'react-intl';\n\nimport ruMessages from './translations/ru.json';\n\ninterface Provider {\n  children: ReactNode;\n}\n\nconst I18nProvider = ({ children }: Provider): ReactElement => {\n  const messages = useMemo(() => ruMessages, []);\n\n  return (\n    <IntlProvider locale=\"ru\" messages={messages}>\n      {children}\n    </IntlProvider>\n  );\n};\n\nexport default memo(I18nProvider);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './containers/App/App';\n\nimport I18nProvider from './i18n/I18nProvider';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <I18nProvider>\n      <App />\n    </I18nProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}